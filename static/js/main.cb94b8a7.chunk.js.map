{"version":3,"sources":["validations/validation.tsx","components/Check.tsx","store/actions.tsx","store/types.tsx","services/Api.tsx","components/Form.tsx","App.tsx","serviceWorker.ts","store/reducer.tsx","store/store.tsx","index.tsx"],"names":["checkLength","str","length","isNumber","split","filter","s","test","hasLowercase","a","hasUppercase","Check","validation","className","classnames","hasRegular","hasNumber","correctLength","setField","field","value","type","payload","key","setValidationField","sendData","username","password","fetch","method","headers","body","JSON","stringify","user","fetched","json","FormComponent","useSelector","state","password2","blocked","success","dispatch","useDispatch","sendRequest","error","console","log","validate","e","submit","preventDefault","undefined","hasInput","isPassword2Correct","change","target","name","React","Form","onSubmit","Alert","color","FormGroup","row","Label","for","sm","Col","Input","id","onChange","onBlur","Button","disabled","App","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cb94b8a7.chunk.js","sourcesContent":["export function checkLength(str: string):boolean {\r\n    return str.length > 6;\r\n}\r\n\r\nexport function isNumber(str: string):boolean {\r\n    return str.split(\"\").filter(s => /^-{0,1}\\d+$/.test(s)).length > 0;\r\n}\r\n\r\nexport function hasLowercase(str: string):boolean {\r\n    return str.split(\"\").filter(a => /[a-z]/.test(str)).length > 0;\r\n}\r\n\r\nexport function hasUppercase(str: string):boolean {\r\n   return str.split(\"\").filter(a => /[A-Z]/.test(str)).length > 0;\r\n}","import * as React from 'react';\r\nimport classnames from 'classnames';\r\n\r\ninterface ICheckProps {\r\n    correctLength: boolean;\r\n    hasUppercase: boolean;\r\n    hasNumber: boolean;\r\n    isPassword2Correct: boolean;\r\n    hasRegular: boolean;\r\n};\r\n\r\nconst Check: React.FC<{ validation: ICheckProps }> = ({validation}) => {\r\n    return <div className=\"row\">\r\n    <div className=\"col\">\r\n    <p className={classnames({\"text-danger\": !validation.hasRegular, \"text-success\": validation.hasRegular})}> Regular letter </p>\r\n        <p className={classnames({\"text-danger\": !validation.hasUppercase, \"text-success\": validation.hasUppercase})}>Capital letter </p>\r\n    </div>\r\n\r\n    <div className=\"col\">\r\n        <p className={classnames({\"text-danger\": !validation.hasNumber, \"text-success\": validation.hasNumber})}>Number </p>\r\n    <p className={classnames({\"text-danger\": !validation.correctLength, \"text-success\": validation.correctLength})}>At least 6 </p>\r\n    </div>\r\n    </div>\r\n}\r\n\r\nexport default Check;","import { UPDATE_FORM, UPDATE_VALIDATION, RESET_STATE } from './types';\r\n\r\nexport function setField<T>(field: string, value: T) {\r\n    return {\r\n        type: UPDATE_FORM,\r\n        payload: {\r\n            key: field,\r\n            value: value\r\n        }\r\n    }\r\n}\r\n\r\nexport function setValidationField(field: string, value: boolean) {\r\n    return {\r\n        type: UPDATE_VALIDATION,\r\n        payload: {\r\n            key: field,\r\n            value: value\r\n        }\r\n    }\r\n}\r\n\r\nexport function resetState() {\r\n    return {type: RESET_STATE}\r\n}","export const UPDATE_FORM = \"UPDATE_FORM\";\r\nexport const UPDATE_VALIDATION = \"UPDATE_VALIDATION\";\r\nexport const RESET_STATE = \"RESET_STATE\";","\r\nexport const sendData = async (username: string, password: string): Promise<any> => {\r\n    const fetched = await fetch(\"http://localhost:8080/saveUserPassword\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({user: username, password: password})\r\n    });\r\n\r\n    return fetched.json();\r\n}\r\n\r\n\r\n\r\n\r\n","import * as React from 'react';\r\nimport {hasLowercase, isNumber, checkLength, hasUppercase} from \"../validations/validation\";\r\nimport Check from './Check';\r\nimport {Col, Button, Form, FormGroup, Label, Input, Alert} from 'reactstrap';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setField, setValidationField, resetState} from '../store/actions';\r\nimport {IReduxState, IValidation} from '../store/state';\r\nimport {sendData} from '../services/Api';\r\nimport './form.css'\r\n\r\nconst FormComponent: React.FC = () => {\r\n    const username: string = useSelector<IReduxState, string>((state) => state.username);\r\n    const password: string = useSelector<IReduxState, string>((state) => state.password);\r\n    const password2: string = useSelector<IReduxState, string>((state) => state.password2);\r\n    const blocked: boolean = useSelector<IReduxState, boolean>((state) => state.blocked);\r\n    const validation: IValidation = useSelector<IReduxState, IValidation>((state) => state.validation);\r\n    const success: boolean = useSelector<IReduxState, boolean>((state) => state.success);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const sendRequest = async (username: string, password: string, password2: string): Promise<void> => {\r\n        try {\r\n            dispatch(setField<boolean>(\"blocked\", true));\r\n            const json = await sendData(username, password);\r\n            dispatch(setField<boolean>(\"success\", !json.error));\r\n            console.log(json);\r\n            dispatch(resetState());\r\n            dispatch(setField<boolean>(\"success\", true));\r\n        } catch (error) {\r\n            console.log(error);\r\n            dispatch(setField<boolean>(\"blocked\", false));\r\n            dispatch(setField<boolean>(\"success\", false));\r\n        }\r\n    }\r\n\r\n    const validate = async (e: React.FormEvent<HTMLInputElement> | undefined): Promise<void> => {\r\n\r\n        dispatch(setValidationField(\"correctLength\", true));\r\n        dispatch(setValidationField(\"hasInput\", true));\r\n        dispatch(setValidationField(\"hasRegular\", true));\r\n        dispatch(setValidationField(\"hasUppercase\", true));\r\n        dispatch(setValidationField(\"hasNumber\", true));\r\n        dispatch(setValidationField(\"isPassword2Correct\", true));\r\n\r\n\r\n        if (!hasLowercase(password)) dispatch(setValidationField(\"hasRegular\", false));\r\n        if (!hasUppercase(password)) dispatch(setValidationField(\"hasUppercase\", false));\r\n        if (!isNumber(password)) dispatch(setValidationField(\"hasNumber\", false));\r\n        if (!checkLength(password)) dispatch(setValidationField(\"correctLength\", false));\r\n        if (password !== password2 || password === \"\") dispatch(setValidationField(\"isPassword2Correct\", false));\r\n        dispatch(setField(\"blocked\", !(hasLowercase(password) && hasUppercase(password) && isNumber(password) && checkLength(password) && (password == password2) && password !== \"\")));\r\n\r\n    }\r\n\r\n    const submit = async (e: React.FormEvent<HTMLFormElement>): Promise<void> => {\r\n        e.preventDefault();\r\n        dispatch(setField<boolean>(\"success\", false));\r\n        try {\r\n            await validate(undefined);\r\n            if (validation.correctLength && validation.hasInput && validation.hasRegular && validation.hasUppercase && validation.hasNumber && validation.isPassword2Correct) {\r\n                await sendRequest(username, password, password2);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    const change = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        e.preventDefault();\r\n        dispatch(setField<string>(e.target.name, e.target.value));\r\n        validate(undefined);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        validate(undefined);\r\n    }, []);\r\n\r\n    return (<Form className=\"form\" onSubmit={submit}>\r\n        {\r\n            success && (\r\n                <Alert color=\"success\">\r\n                    Success\r\n                </Alert>\r\n            )\r\n        }\r\n\r\n        {\r\n            (!validation.isPassword2Correct && password.length > 0 && password2.length > 0) ? (\r\n                <Alert color=\"danger\">\r\n                    Invalid verification\r\n                </Alert>\r\n            ) : null}\r\n        <FormGroup row>\r\n            <Label for=\"username\" sm={4}>Username: </Label>\r\n            <Col sm={8}>\r\n                <Input type=\"text\" name=\"username\" id=\"username\" value={username} onChange={change}\r\n                       onBlur={validate}/>\r\n            </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n            <Label for=\"password\" sm={4}>Enter Password: </Label>\r\n            <Col sm={8}>\r\n                <Input type=\"password\" name=\"password\" id=\"password\" value={password} onChange={change}\r\n                       onBlur={validate}/>\r\n            </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n            <Label for=\"password\" sm={4}>Re-Enter Password: </Label>\r\n            <Col sm={8}>\r\n                <Input type=\"password\" name=\"password2\" id=\"password2\" value={password2}\r\n                       onChange={change} onBlur={validate}/>\r\n            </Col>\r\n        </FormGroup>\r\n        <Check validation={validation}/>\r\n        <Button color=\"success\" type=\"submit\" disabled={blocked}>Submit</Button>\r\n    </Form>)\r\n}\r\n\r\nexport default FormComponent;","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from './components/Form';\n\nfunction App() {\n  return (\n    <>\n    <br/>\n    <div className=\"container\">\n      <Form />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_FORM, UPDATE_VALIDATION, RESET_STATE  } from './types'\r\nimport {IReduxState} from './state';\r\n\r\ninterface IReduxPayload {\r\n    key: string;\r\n    value: string;\r\n};\r\n\r\ninterface IReduxAction {\r\n    type: string;\r\n    payload: IReduxPayload;\r\n};\r\n\r\nconst initialState: IReduxState = {\r\n  username: '',\r\n  password: '',\r\n  password2: '',\r\n  blocked: false,\r\n  validation: {\r\n    \"correctLength\": false,\r\n    \"hasInput\": false,\r\n    \"hasRegular\": false,\r\n    \"hasUppercase\": false,\r\n    \"hasNumber\": false,\r\n    \"isPassword2Correct\": false\r\n  },\r\n  success: false\r\n}\r\n\r\nexport function rootReducer(  state = initialState,  action: IReduxAction): IReduxState {\r\n  switch (action.type) {\r\n    case UPDATE_FORM: {\r\n      return {\r\n        ...state,\r\n        [action.payload.key]: action.payload.value\r\n      }\r\n    }\r\n    case UPDATE_VALIDATION: {\r\n      return {\r\n        ...state,\r\n        \"validation\": {\r\n          ...state.validation,\r\n          [action.payload.key]: action.payload.value\r\n        }\r\n      }\r\n    }\r\n    case RESET_STATE:\r\n      return initialState;\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import {rootReducer} from './reducer';\r\nimport { createStore } from 'redux';\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport {store} from './store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}